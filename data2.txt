#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX 20

// Stack and its operations
char stack[MAX];
int top = -1;

// Function to push an element onto the stack
void push(char x) {
    if (top == MAX - 1) {
        printf("Stack Overflow\n");
    } else {
        stack[++top] = x;
    }
}

// Function to pop an element from the stack
char pop() {
    if (top == -1) {
        return -1;
    } else {
        return stack[top--];
    }
}

// Function to get the precedence of operators
int priority(char x) {
    if (x == '(') {
        return 0;
    }
    if (x == '+' || x == '-') {
        return 1;
    }
    if (x == '*' || x == '/') {
        return 2;
    }
    if (x == '^') {
        return 3;
    }
    return -1;
}

int main() {
    char exp[50];
    char *e, x;

    printf("Enter an infix expression: ");
    scanf("%s", exp);

    printf("The equivalent postfix expression is: ");

    e = exp; // Pointer to traverse the expression

    while (*e != '\0') {
        if (isalnum(*e)) { // If the character is an operand
            printf("%c", *e);
        } else if (*e == '(') { // If the character is '('
            push(*e);
        } else if (*e == ')') { // If the character is ')'
            while ((x = pop()) != '(') {
                printf("%c", x);
            }
        } else { // If the character is an operator
            while (top != -1 && priority(stack[top]) >= priority(*e)) {
                printf("%c", pop());
            }
            push(*e);
        }
        e++;
    }

    // Pop all remaining operators from the stack
    while (top != -1) {
        printf("%c", pop());
    }

    printf("\n");
    return 0;
}
